@page "/customers"
@rendermode InteractiveServer
@using shop.shared
@attribute [StreamRendering]
@inject IDomainService<Customer> CustomerService
@inject IDialogService DialogService
@inject IQueryService<Customer> CustomerQueryService

<MyMudProviders />

<PageTitle>Customers</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Customers</MudText>
<MudDatePicker Label="Customers at date:" DateChanged="OnDateChange" />

<MudButton @onclick="(() => OpenModifyOrCreateCustomer(null))" Variant="Variant.Filled" Color="Color.Primary">
    New Customer
</MudButton>

@if (customers == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="customers" Hover="true" SortLabel="Sort By" Elevation="0">
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Address">@context.Address</MudTd>
            <MudTd DataLabel="Created">@context.CreatedAt</MudTd>
            <MudTd DataLabel="Updated">@context.UpdatedAt</MudTd>
            <MudTd DataLabel="Holdings">@context.Holdings</MudTd>
            <MudButton @onclick="(() => OpenModifyOrCreateCustomer(context))" Variant="Variant.Filled" Color="Color.Primary">
                Update
            </MudButton>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
}
@code {
    private IEnumerable<Customer>? customers;
    public DateTime? selectedTime = DateTime.Now.Date.AddDays(1);

    private void OpenModifyOrCreateCustomer(Customer? existing = null)
    {
        var parameters = new DialogParameters();
        parameters.Add("CustomerName", existing?.Name);
        parameters.Add("CustomerAddress", existing?.Address);
        parameters.Add("ExistingId", existing?.Id);

        parameters.Add("OnOkEvent", (Action<eventsourcing.IEvent<Customer>>)(e => AddEvent(e)));
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<MutableCustomerDialog>(existing is null ? "New Customer" : "Update Customer", parameters, options);
    }

    private void AddEvent(eventsourcing.IEvent<Customer> newCustomerEvent)
    {
        CustomerService.AddEvent(newCustomerEvent);
        RefreshList();
    }

    private void RefreshList()
    {
        customers = CustomerQueryService.Get(selectedTime);
    }

    void OnDateChange(DateTime? newDate)
    {
        selectedTime = newDate!.Value.Date.AddDays(1);
        RefreshList();
    }

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);
        RefreshList();
    }
}
