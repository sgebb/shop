@page "/customers"
@rendermode InteractiveServer
@using shop.eventsourcing
@using shop.shared
@attribute [StreamRendering]
@inject IEventBus EventBus
@inject IDialogService DialogService
@inject IQueryService<Customer> CustomerQueryService
@inject IQueryService<Fruit> FruitQueryService
@inject IReadModelRefresher<Customer> CustomerRefresher

<MyMudProviders />

<PageTitle>Customers</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Customers</MudText>
<DateTimePicker Label="Customers at date:" ValueChanged="OnDateChange" />

<MudButton @onclick="(async () => await OpenModifyOrCreateCustomer(null))" Variant="Variant.Filled" Color="Color.Primary">
    New Customer
</MudButton>
@if (customerListObjects == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="customerListObjects" Hover="true" SortLabel="Sort By" Elevation="0">
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Address">@context.Address</MudTd>
            <MudTd DataLabel="Created">@context.CreatedAt</MudTd>
            <MudTd DataLabel="Updated">@context.UpdatedAt</MudTd>
            <MudTd DataLabel="Holdings">@context.Holdings</MudTd>
            <MudButton @onclick="(async () => await OpenModifyOrCreateCustomer(context))" Variant="Variant.Filled" Color="Color.Primary">
                Update
            </MudButton>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>


    <MudButton @onclick="(async () => await RefreshCache())" Variant="Variant.Filled" Color="Color.Primary">
        Refresh customcache
    </MudButton>
}
@code {
    private IEnumerable<CustomerObject>? customerListObjects;
    public DateTimeOffset? selectedTime = DateTimeOffset.Now.Date.AddDays(1);

    private async Task OpenModifyOrCreateCustomer(CustomerObject? existing = null)
    {
        var parameters = new DialogParameters();
        parameters.Add("CustomerName", existing?.Name);
        parameters.Add("CustomerAddress", existing?.Address);
        parameters.Add("ExistingId", existing?.Id);

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialogRef = DialogService.Show<MutableCustomerDialog>(existing is null ? "New Customer" : "Update Customer", parameters, options);
        if ((await dialogRef.Result).Data is IEvent<Customer> e)
        {
            await AddEvent(e);
        }
    }

    private async Task AddEvent(IEvent<Customer> newCustomerEvent)
    {
        await EventBus.PublishAsync(newCustomerEvent);
        await RefreshList();
    }


    private async Task RefreshCache()
    {
        await CustomerRefresher.RefreshCache(CancellationToken.None);
        await RefreshList();
    }

    private async Task RefreshList()
    {
        var customers = await Task.FromResult(CustomerQueryService.Get(selectedTime));
        customerListObjects = customers.Select(c =>
        {

            var holdingsString = "";
            foreach (var (id, amount) in c.Holdings)
            {
                var fruit = FruitQueryService.Get(id, selectedTime);
                if (fruit != null)
                {
                    holdingsString += $"{fruit.Name}: {amount}\n";
                }
            }
            return new CustomerObject(c.Id, c.Name, c.Address, holdingsString, c.CreatedAt, c.UpdatedAt);
        });
    }

    async Task OnDateChange(DateTimeOffset newDate)
    {
        selectedTime = newDate;
        RefreshList();
    }

    protected override async Task OnInitializedAsync()
    {
        _ = Task.Run(async () =>
        {
            await foreach (var e in EventBus.Subscribe<ReadModelsUpdated>())
            {
                if (e.DomainModelType == typeof(Customer))
                {
                    await RefreshList();
                    await InvokeAsync(() => StateHasChanged());
                }
            }
        });
        await RefreshList();
    }

    private record CustomerObject(Guid Id, string Name, string Address, string Holdings, DateTimeOffset CreatedAt, DateTimeOffset UpdatedAt);
}
