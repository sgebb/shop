@page "/fruits"
@rendermode InteractiveServer
@using shop.eventsourcing
@using shop.shared
@attribute [StreamRendering]
@inject IDomainService<Fruit> FruitService
@inject IDialogService DialogService

<MyMudProviders />

<PageTitle>Fruits</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Fruits</MudText>
<MudDatePicker Label="Fruits at date:" DateChanged="OnDateChange" />

<MudButton @onclick="(() => OpenModifyOrCreateFruit(null))" Variant="Variant.Filled" Color="Color.Primary">
    New Fruit
</MudButton>

@if (fruits == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="fruits" Hover="true" SortLabel="Sort By" Elevation="0">
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Color">@context.Color</MudTd>
                <MudTd DataLabel="Created">@context.CreatedAt</MudTd>
                <MudTd DataLabel="Updated">@context.UpdatedAt</MudTd>
                <MudTd DataLabel="Holdings">@context.Holdings</MudTd>
                <MudButton @onclick="(async () => await OpenModifyOrCreateFruit(context))" Variant="Variant.Filled" Color="Color.Primary">
                    Update
                </MudButton>
                <MudButton @onclick="(() => DeleteFruit(context))" Variant="Variant.Filled" Color="Color.Error">
                    Delete
                </MudButton>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{50, 100}" />
            </PagerContent>
        </MudTable>
}

<MudButton @onclick="(async () => await DepositFruit())" Variant="Variant.Filled" Color="Color.Primary">
    Deposit fruit
</MudButton>

<MudButton @onclick="(async () => await SellFruit())" Variant="Variant.Filled" Color="Color.Primary">
    Sell fruit
</MudButton>

@code {
    private IEnumerable<Fruit>? fruits;
    public DateTime? selectedTime = DateTime.Now.Date.AddDays(1);

    private async Task OpenModifyOrCreateFruit(Fruit? existing = null)
    {
        var parameters = new DialogParameters();
        parameters.Add("FruitName", existing?.Name);
        parameters.Add("FruitColor", existing?.Color);
        parameters.Add("ExistingId", existing?.Id);

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialogRef = DialogService.Show<MutableFruitDialog>(existing is null ? "New Fruit" : "Update Fruit", parameters, options);
        if ((await dialogRef.Result).Data is IEvent<Fruit> e)
        {
            AddEvent(e);
        }
    }

    private async Task SellFruit()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialogRef = DialogService.Show<SellFruitDialog>("Sell fruit", parameters, options);
        if ((await dialogRef.Result).Data is IEvent<Fruit> e)
        {
            AddEvent(e);
        }
    }

    private async Task DepositFruit()
    {
        // var parameters = new DialogParameters();
        // parameters.Add("OnOkEvent", (Action<IEvent<Fruit>>)(e => AddEvent(e)));
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialogRef = DialogService.Show<DepositFruitDialog>("Deposit fruit", options);
        if ((await dialogRef.Result).Data is IEvent<Fruit> e)
        {
            AddEvent(e);
        }
    }


    private void DeleteFruit(Fruit existing)
    {
        var e = new DeleteFruitEvent(existing.Id);
        AddEvent(e);
    }

    private void AddEvent(eventsourcing.IEvent<Fruit> newFruitEvent)
    {
        FruitService.AddEvent(newFruitEvent);
        RefreshList();
    }

    private void RefreshList()
    {
        fruits = FruitService.Get(selectedTime).Where(f => f.State != eventsourcing.State.Deleted);
    }

    void OnDateChange(DateTime? newDate)
    {
        selectedTime = newDate!.Value.Date.AddDays(1);
        RefreshList();
    }

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);
        RefreshList();
    }
}
