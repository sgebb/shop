@page "/fruits"
@rendermode InteractiveServer
@using shop.eventsourcing
@using shop.shared
@attribute [StreamRendering]
@inject IEventBus EventBus
@inject IDialogService DialogService
@inject IQueryService<Fruit> FruitQueryService
@inject IReadModelRefresher<Fruit> FruitRefresher

<MyMudProviders />

<PageTitle>Fruits</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Fruits</MudText>
<DateTimePicker Label="Fruits at date:" ValueChanged="OnDateChange" />

<MudButton @onclick="(async () => await OpenModifyOrCreateFruit(null))" Variant="Variant.Filled" Color="Color.Primary">
    New Fruit
</MudButton>

@if (fruits == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="fruits" Hover="true" SortLabel="Sort By" Elevation="0">
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Color">@context.Color</MudTd>
                <MudTd DataLabel="Created">@context.CreatedAt</MudTd>
                <MudTd DataLabel="Updated">@context.UpdatedAt</MudTd>
                <MudTd DataLabel="Holdings">@context.Holdings</MudTd>
                <MudButton @onclick="(async () => await OpenModifyOrCreateFruit(context))" Variant="Variant.Filled" Color="Color.Primary">
                    Update
                </MudButton>
                <MudButton @onclick="(async () => await DeleteFruit(context))" Variant="Variant.Filled" Color="Color.Error">
                    Delete
                </MudButton>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{50, 100}" />
            </PagerContent>
        </MudTable>
}

<MudButton @onclick="(async () => await DepositFruit())" Variant="Variant.Filled" Color="Color.Primary">
    Deposit fruit
</MudButton>

<MudButton @onclick="(async () => await SellFruit())" Variant="Variant.Filled" Color="Color.Primary">
    Sell fruit
</MudButton>

<MudButton @onclick="(async () => await RefreshCache())" Variant="Variant.Filled" Color="Color.Primary">
    Refresh fruitcache
</MudButton>

@code {
    private IEnumerable<Fruit>? fruits;
    public DateTimeOffset? selectedTime = DateTime.Now.Date.AddDays(1);

    private async Task OpenModifyOrCreateFruit(Fruit? existing = null)
    {
        var parameters = new DialogParameters();
        parameters.Add("FruitName", existing?.Name);
        parameters.Add("FruitColor", existing?.Color);
        parameters.Add("ExistingId", existing?.Id);

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialogRef = DialogService.Show<MutableFruitDialog>(existing is null ? "New Fruit" : "Update Fruit", parameters, options);
        if ((await dialogRef.Result).Data is IEvent<Fruit> e)
        {
            await AddEvent(e);
        }
    }

    private async Task SellFruit()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialogRef = DialogService.Show<SellFruitDialog>("Sell fruit", parameters, options);
        if ((await dialogRef.Result).Data is IEvent<Fruit> e)
        {
            await AddEvent(e);
        }
    }

    private async Task DepositFruit()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialogRef = DialogService.Show<DepositFruitDialog>("Deposit fruit", options);
        if ((await dialogRef.Result).Data is IEvent<Fruit> e)
        {
            await AddEvent(e);
        }
    }


    private async Task DeleteFruit(Fruit existing)
    {
        var e = new DeleteFruitEvent(existing.Id);
        await AddEvent(e);
    }

    private async Task AddEvent(eventsourcing.IEvent<Fruit> newFruitEvent)
    {
        await EventBus.PublishAsync(newFruitEvent);
    }

    private async Task RefreshList()
    {
        fruits = await Task.FromResult(FruitQueryService.Get(selectedTime).Where(f => f.State != eventsourcing.State.Deleted));
    }

    private async Task RefreshCache()
    {
        await FruitRefresher.RefreshCache(CancellationToken.None);
        await RefreshList();
    }

    async Task OnDateChange(DateTimeOffset newDate)
    {
        selectedTime = newDate;
        await RefreshList();
    }

    protected override async Task OnInitializedAsync()
    {
        _ = Task.Run(async () =>
        {
            await foreach (var e in EventBus.Subscribe<ReadModelsUpdated>())
            {
                if (e.DomainModelType == typeof(Fruit))
                {
                    await RefreshList();
                    await InvokeAsync(() => StateHasChanged());
                }
            }
        });
        await RefreshList();
    }
}
