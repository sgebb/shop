@using shop.eventsourcing
@using shop.shared
<MudDialog>
    <TitleContent>New Customer</TitleContent>
    <DialogContent>
        <MudTextField Label="Name" @bind-Value="CustomerName" Required="true" ReadOnly="HasExisting()" Disabled="HasExisting()" />
        <MudTextField Label="Address" @bind-Value="CustomerAddress" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>


@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public Guid? ExistingId { get; set; }
    [Parameter] public string? CustomerName { get; set; }
    [Parameter] public string? CustomerAddress { get; set; }

    bool HasExisting()
    {
        return ExistingId is not null;
    }

    void Submit()
    {
        // Validate the input if needed
        if (string.IsNullOrWhiteSpace(CustomerName) || string.IsNullOrWhiteSpace(CustomerAddress))
        {
            // You can show an error message or prevent submission
            return;
        }

        IEvent<Customer> e;
        if (!ExistingId.HasValue)
        {
            e = new shared.NewCustomerEvent(Guid.NewGuid(), CustomerName, CustomerAddress);   
        }
        else
        {
            e = new shared.UpdateCustomerAddressEvent(ExistingId.Value, CustomerAddress);
        }


        // Close the dialog
        MudDialog.Close(DialogResult.Ok(e));
    }

    void Cancel() => MudDialog.Cancel();

}