@using shop.eventsourcing
@using shop.shared
<MudDialog>
    <TitleContent>New Fruit</TitleContent>
    <DialogContent>
        <MudTextField Label="Name" @bind-Value="FruitName" Required="true" ReadOnly="HasExisting()" Disabled="HasExisting()"/>
        <MudTextField Label="Color" @bind-Value="FruitColor" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>


@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public Guid? ExistingId { get; set; }
    [Parameter] public string? FruitName { get; set; }
    [Parameter] public string? FruitColor { get; set; }

    bool HasExisting()
    {
        return ExistingId is not null;
    }

    void Submit()
    {
        // Validate the input if needed
        if (string.IsNullOrWhiteSpace(FruitName) || string.IsNullOrWhiteSpace(FruitColor))
        {
            // You can show an error message or prevent submission
            return;
        }

        IEvent<Fruit> e;
        if (!ExistingId.HasValue)
        {
            e = new shared.CreateFruitEvent(Guid.NewGuid(), FruitName, FruitColor);   
        }
        else
        {
            e = new shared.UpdateFruitEvent(ExistingId.Value, FruitColor);
        }

        // Close the dialog
        MudDialog.Close(DialogResult.Ok(e));
    }

    void Cancel() => MudDialog.Cancel();

}